## 控件
- TextView
  - 基础属性
    1. layout_width
    2. layout_height
    3. id
    4. text
    5. textColor
    6. textStyle
    7. textSize
    8. background
    9. gravity
  - 带阴影的TextView
    1. android:shadowColor:
    2. android:shadowRadius:
    3. android:shadowDx:
    4. android:shadowDy:
  - 实现跑马灯效果的TextView
    1. android:singleLine:
    2. android:focusable:
    3. android:focusableTouchMode:
    4. android:ellipsize
    5. android:marqueeRepeatLimit；
- Button
  - StateListDrawable
    StateListDrawable是Drawable资源的一种，可以根据不同的状态，设置不同的图片效果，关键节点\<selector>，我们只需要将Button的background属性设置为该drawable资源即可轻松实现，按下按钮时不同的按钮颜色或背景
    1. drawable:
    2. state_focused；
    3. state_pressed
    4. state_enable:
    5. state_selected:
    6. state_checked:
    7. state_checkable:
    8. state_window_focused；
    9. state_active:
    10. state_single:
    11. state_first:
    12. state_middle:
    13. state_last:
  - Button事件处理
    1. 点击事件
    2. 长按事件
    3. 触摸事件
- EditText
  - 主要属性
    1. android:hint 输入提示
    2. android:textColorHint
    3. android:inputType
    4. android:drawableXxxx
    5. android:drawablePadding
    6. android:paddingXxxx
    7. android:background
- ImageView
  - 主要属性
    1. android:src 
    2. android:scaleType
    3. android:maxHeight
    4. android:maxWidth
    5. android:adjustViewBounds 
- ProgressBar
  - 常用属性
    1. android:max 进度条的最大值
    2. android:progress 进度条已完成进度值
    3. android:indeterminate 如果设置成true，则进度条不精确显示进度
    4. style="?android:attr/progressBarStyleHorizontal" 水平进度条
- Notification(通知)
  - 创建一个NotificationManager
  - 使用Builder构造器来创建Notification对象
- ToolBar
  - 常见属性
    - android:layout_width
    - android:layout_height
    - android:background
    - app:navigationIcon
    - app:title:
    - app:titleTextColor
    - app:titleMarginStart
    - app:subtitle
    - app:subtitleTextColor
    - app:logo
- AlertDialog
  - 实现方式
    - AlertDialog.Build build = new AlertDialog.Builder(context); 构建Dialog的各种参数
    - Builder.setIcon(int iconId); 添加ICON
    - Builder.setTitle(CharSequence title); 添加标题
    - Builder.setMessage(CharSequence message); 添加信息
    - Builder.setView(View view); 设置自定义布局
    - Builder.create(); 创建Dialog
    - Builder.show(); 显示对话框
    - setPositiveButton 确定按钮
    - setNegativeButton 取消按钮
    - setNeutralButton 中间按钮
- PopupWindow
  - 常用方法
    - setContentView(View contentView)
    - showAsDropDown(View anchor)
    - showAsDropDown(View anchor, int xoff, int yoff)
    - setFocusable(boolean focusable)
    - setBackgroundDrawable(Drawable background)
    - dismiss()
    - setAnimationStyle(int animationStyle)
    - setTouchable(boolean touchable)
    - setOutsideTouchable(boolean touchable)
---
## 布局
- LinearLayout
  - orientation:布局中组件的排列方式
  - gravity:控制组件所包含的子元素的对齐方式，可多个组合 `"center_horizontal|bottom"`
  - layout_gravity:控制该组件在父容器里的对齐方式 
  - background：为该组件设置一个背景图片，或者是直接用颜色覆盖
  - divider：分割线
  - showDividers：设置分割线所在的位置，none（无），beginning（开始），end（结束），middle（每两个组件间）
  - dividerPadding：设置分割线的padding
  - layout_weight（权重）：该属性是用来等比例的划分区域
- RelativeLayout
  - 根据父容器定位：
    1. 
  - 根据兄弟容器定位：
  - 通用属性：
    - margin设置组件与父容器的边距
    - padding设置组件内部元素的边距
- FrameLayout
  - 常见属性：
- TableLayout
  - 常见属性
  - 子控件设置属性
- GridLayout
  - 常见属性
  - 子控件属性
- ConstraintLayout
- ListView
- ---
## ListView
---
## RecyclerView
---
## 动画
- 动画类型：
  1. 逐帧动画（frame-by-frame animation）
  2. 补间动画（tweened animation）
     1. alpha 透明度
     2. rotate 旋转
     3. scale 缩放
     4. translate 平移
  3. 属性动画（property animation）
     1. ValueAnimator
      ```java
      ValueAnimator anim = ValueAnimator.ofFloat(0f, 1f);
      anim.setDuration(2000);
      ```
      ```java
      anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
          
        }
      })
      ```
      ```java
      anim.start();
      ```
     2. ObjectAnimator
     3. 监听器
        - onAnimationStart() 动画开始的时候调用
        - onAnimationEnd() 动画结束的时候调用
        - onAnimationCancel() 动画被取消的时候调用
        - onAnimationRepeat() 动画重复执行的时候调用
- 动画的启动和停止
  1. 获取动画的Drawable资源 `AnimationDrawable anim = (AnimationDrawable) relativeLayout.getBackground();`
  2. 启动动画 `anim.start();`
  3. 停止动画 `anim.stop();`
---
## 单位和尺寸
1. px与pt的区别
   1. px：pixels（像素），不同设备显示效果相同
   2. pt：point，是一个标准的长度单位，1pt=1/72英寸，用于印刷业，非常简单易用
2. dp与sp的区别
3. LayoutParams
   相当于一个Layout的信息包，它封装了Layout的位置、高、宽等信息
---
## ViewPager
---
## Fragment
- Fragment是什么
  - 具备生命周期，子activity
  - 必须委托在activity中才能运行
- Fragment用法
- Fragment管理
- Fragment通信与动画